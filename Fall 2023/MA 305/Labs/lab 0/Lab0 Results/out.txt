=======================
Krystian Confeiteiro
Dr. Sam
MA305-06DB
09/15/2023
=======================


Lab ZERO | Results
h: 0.5
x: 0.16666666666666663
y: 0.09999999999999998
u: -1.1102230246251565e-16
v: -1.1102230246251565e-16
q: 1.0


C:
h = 0.5000000000000000
x = 0.1666666666666666
y = 0.1000000000000000
u = -0.0000000000000001
v = -0.0000000000000001
q = 1.0000000000000000


 Fortran:
 h =  0.500000000    
 x =  0.166666687    
 y =  0.100000024    
 u =   5.96046448E-08
 v =   1.19209290E-07
 q =  0.500000000    


 Fortran (double precision):
 h =  0.50000000000000000     
 x =  0.16666666666666663     
 y =   9.9999999999999978E-002
 u =  -1.1102230246251565E-016
 v =  -1.1102230246251565E-016
 q =   1.0000000000000000     

=====================================
======= Answers to 4, 6, and 8 ==========
=====================================

Q4: Compare the computed values with the exact values you found by hand. Which ones agree and
which ones do not? Any wild guess as to what may have caused the discrepancy?
A:  The double precision Fortran and the Python agree the most. The C and standard Fortran code agree the least.

The Fortran code with the double precision agrees the least; the values are off by the largest margin and only 50% of the values agree. My guess as to why they are so different has to do with the way that Fortran rounds decimals and handles truncations.

Q6: Did you get different values now? Which code (C, Fortran or Python) is more accurate?
A: Yes, they all got somewhat different values, with the standard Fortran code being the farthest for the "Y" calculation.

Q8: Did you get different values now? Is the double precision calculations in Fortran more correct
than the single precision?
A: Yes, the double precision produced more precise results than the Python code, as expected. I would have also expected the original Fortran code to be somewhat close to the double precision.

