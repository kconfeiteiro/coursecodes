{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-833daf61-af73-4118-be0a-10efe0574ee4.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1707399631025,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1707399411689,"exec_count":3,"id":"955df9","input":"import numpy as np\nfrom astropy.io import fits\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom astropy import units as u\nfrom astropy import constants as const\nfrom specutils import Spectrum1D\nfrom astropy.visualization import quantity_support\nfrom specutils.fitting import fit_generic_continuum\nfrom specutils.spectra import SpectralRegion \nfrom specutils.analysis import correlation\nfrom astropy.nddata import StdDevUncertainty\n\n#path to file\n#archive_path='./EpsilonAurigae_20240201015728_34.fit'\narchive_path='./HD20902_34_20240201T013423.fit'\n#got the y-axis (flux) values\nfits_data = fits.getdata(archive_path, ext=0) #Save extension 0 from the fits file\n#get the header info\nhdul = fits.open(archive_path) #Open the fits file\nhdr = hdul[0].header #Save the header from extension 0\nprint(hdr)\n#-------------------------------------------------\\\n#Contruct the wavelength points for the x-axis    |\n#-------------------------------------------------/\nstart_wave=hdr['CRVAL1'] #Save the first wavelength value from the header\nprint('start_wave = ',start_wave)\nwave_step=hdr['CDELT1'] #Save the wavelength step value from the header\nprint('wave_step = ',wave_step)\nnum_wave_points=hdr['NAXIS1'] #Save the number of wavelength points from the header\nprint('num_wave_points = ',num_wave_points)\nend_wave=start_wave+wave_step*num_wave_points #Calculate the final wavelength point\nprint('end_wave = ',end_wave)\n#build wavelength array\nwavelengths=np.linspace(start_wave,end_wave,num_wave_points) #Make an array for the wavelength values\n\n#-------------------------------------------------\\\n#Normalize all the flux for the model and archive |\n#-------------------------------------------------/\n#archive_wave_chunk = np.logical_and(wavelengths >= 4000, wavelengths <= 4300)\n#fits_data = fits_data[archive_wave_chunk]\n#wavelengths=wavelengths[archive_wave_chunk]\n#fits_data = fits_data/(np.mean(fits_data[archive_wave_chunk])) #Temporary method of normalizing the spectra\n\nfig, ax=plt.subplots()\nax.set_xlabel('Wavelength [$\\mathrm{\\AA}$]',fontsize=20)\nax.set_ylabel('Flux',fontsize=20)\nax.set_title(archive_path)\nax.tick_params(axis='x', labelsize=18)\nax.tick_params(axis='y', labelsize=18)\nax.plot(wavelengths,fits_data)\n\n","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"SIMPLE  =                    T                                                  BITPIX  =                  -32 / bits per data value                            NAXIS   =                    1 / Number of data axes                            NAXIS1  =                 9712 / Length of data axis 1                          SWCREATE= 'Demetra v5.1.2.0' / Software used to generate this file              EXPTIME =                    0 / [s] Total observation duration                 CDELT1  = 0.025303562393837326 / Wavelength pixel step (Angstrom)               CRVAL1  =   6469.3757406152299 / Wavelength pixel start (Angstrom)              BSCALE  =                    1 / linear factor in scaling equation              BZERO   =                    0 / zero point in scaling equation                 BSS_VHEL=                    0 / [km/s] Heliocentric velocity                   CRPIX1  =                    1 / Pixel start                                    CTYPE1  = 'Wavelength' / Axis 1 description                                     CUNIT1  = 'Angstrom' / Axis 1 unitnstart_wave =  6469.37574061523\nwave_step =  0.025303562393837326\nnum_wave_points =  9712\nend_wave =  6715.123938584178\n"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f071a509450>]"},"exec_count":3},"2":{"data":{"image/png":"3ecc074a04bd93723699eb91ea4575e38a251b11","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":463,"width":743},"needs_background":"light"}}},"pos":2,"start":1707399401193,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"68cb51","input":"### Normalize the spectrum to unity\n\n","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6e3f34","input":"### Example Python Script to plot a single eShel spectral order\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"74d55b","input":"### Cross correlate all orders from 31 to 49\n\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c85471","input":"### Cross correlation example \\($\\alpha$ Tau vs. HD 20902\\)\n\n","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d12466","input":"#### Velocity corrections [https://astropy\\-cjhang.readthedocs.io/en/latest/coordinates/velocities.html\\#radial\\-velocity\\-corrections](https://astropy-cjhang.readthedocs.io/en/latest/coordinates/velocities.html#radial-velocity-corrections)\n\n","pos":5,"state":"done","type":"cell"}
{"end":1707399412502,"exec_count":4,"id":"df8b46","input":"#quantity_support() \n#### put model is into 1D spec format with units!\nfluxunit = u.erg / (u.cm ** 2 * u.second *u.AA)\nwave_units=wavelengths*u.AA\nflux_units=fits_data*fluxunit\n\n#spectral region (sr) to avoid when fitting the continuum\nsr = SpectralRegion(6480*u.AA, 6505*u.AA)+SpectralRegion(6515*u.AA,6530*u.AA)+SpectralRegion(6555*u.AA,6575*u.AA)\n\n#create a specutils object\nspec1d = Spectrum1D(spectral_axis=wave_units, flux=flux_units)\n#divide the spectrum by a fit to the continuum\ncont_norm_spec=spec1d / fit_generic_continuum(spec1d,median_window=5,exclude_regions=sr)(spec1d.spectral_axis) \n\nfig, ax=plt.subplots()\nax.set_xlabel('Wavelength [$\\mathrm{\\AA}$]',fontsize=20)\nax.set_ylabel('Normalized Flux',fontsize=20)\nax.set_title(archive_path)\nax.tick_params(axis='x', labelsize=18)\nax.tick_params(axis='y', labelsize=18)\nax.plot(wavelengths,fits_data,label='raw spectrum')\nax.plot(cont_norm_spec.spectral_axis, cont_norm_spec.flux,label='normalized')\nax.legend()\nones=np.ones(np.size(wavelengths))\nax.plot(wavelengths,ones,color='black')\n\n\n","kernel":"python3","no_halt":true,"output":{"0":{"name":"stderr","text":"WARNING: Model is linear in parameters; consider using linear fitting methods. [astropy.modeling.fitting]\n"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f0715c29810>]"},"exec_count":4},"2":{"data":{"image/png":"dad3a8c02975c2c7bd1555a64e6e3321dffd0fe2","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":463,"width":743},"needs_background":"light"}}},"pos":4,"start":1707399411698,"state":"done","type":"cell"}
{"end":1707399414213,"exec_count":5,"id":"d5c701","input":"from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation\nerau = EarthLocation.from_geodetic(lat=29.188183*u.deg, lon=-81.048313*u.deg, height=38*u.m)\n#epsilon Aur  simbad R.A. and Dec for J2000 = 075.4922265361500 +43.8233103098100\n#sc = SkyCoord(ra=075.4922265361500*u.deg, dec=43.8233103098100*u.deg,equinox='J2000')\n#HD20902 simbad R.A. Dec for J000 051.0807087183 +49.8611792931\nsc = SkyCoord(ra=051.0807087183*u.deg, dec=49.8611792931*u.deg,equinox='J2000')\nbarycorr = sc.radial_velocity_correction(obstime=Time('2024-2-1'), location=erau)  \nprint('barycorr =',barycorr.to(u.km/u.s))\nheliocorr = sc.radial_velocity_correction('heliocentric', obstime=Time('2024-2-1'), location=erau)  \nprint('heliocorr = ',heliocorr.to(u.km/u.s))\nto_helio=heliocorr.to(u.km/u.s)\n\nwave_rvcorr = (to_helio/const.c)*wavelengths + wavelengths\n\nfig, ax=plt.subplots()\nax.set_xlabel('Wavelength [$\\mathrm{\\AA}$]',fontsize=20)\nax.set_ylabel('Flux (ADUs)',fontsize=20)\nax.set_title(archive_path)\nax.tick_params(axis='x', labelsize=18)\nax.tick_params(axis='y', labelsize=18)\nax.plot(wavelengths,fits_data,label='Earth Frame RV')\nax.plot(wave_rvcorr,fits_data,label='Sun Frame RV')\nax.set_xlim([6550,6580])\n\nRV_HD20902 = -2.158*u.km/u.s #from simbad\nhalpha_air=6562.81*u.AA #rest frame H-alpha in air\n#expected observed H-alpha wavelength for HD 20902 in the heliocentric frame\nhalpha_obs = halpha_air + (RV_HD20902/const.c)*halpha_air\nax.vlines(halpha_obs.value,0,1,color='black',label=r'Expected H$\\alpha$')\nax.legend()","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"barycorr = -24.35044051250921 km / s\nheliocorr =  -24.349696533922934 km / s\n"},"1":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f070c467f10>"},"exec_count":5},"2":{"data":{"image/png":"d2de1a5475647dcd4ba05a08af3d0d07ed156b40","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":463,"width":766},"needs_background":"light"}}},"pos":6,"start":1707399412505,"state":"done","type":"cell"}
{"end":1707399415026,"exec_count":6,"id":"696b03","input":"def get_wave_flux(path):\n    import numpy as np\n    from astropy.io import fits\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from astropy import units as u\n    from astropy import constants as const\n    from specutils import Spectrum1D\n    from astropy.visualization import quantity_support\n    from specutils.fitting import fit_generic_continuum\n    from specutils.spectra import SpectralRegion \n    from specutils.analysis import correlation\n    from astropy.nddata import StdDevUncertainty\n\n    flux = fits.getdata(path, ext=0) #Save extension 0 from the fits file\n    hdul = fits.open(path) #Open the fiHD20902.listts file\n    hdr = hdul[0].header #Save the header from extension 0\n    #print(hdr)\n#-------------------------------------------------\\\n#Contruct the wavelength points for the x-axis    |\n#-------------------------------------------------/\n    start_wave=hdr['CRVAL1'] #Save the first wavelength value from the header\n    wave_step=hdr['CDELT1'] #Save the wavelength step value from the header\n    num_wave_points=hdr['NAXIS1'] #Save the number of wavelength points from the header\n    end_wave=start_wave+wave_step*num_wave_points #Calculate the final wavelength point\n    wave=np.linspace(start_wave,end_wave,num_wave_points) #Make an array for the wavelength values\n    return wave,flux\n    \ndef get_spec1d(wave,flux,rest_value):\n    import numpy as np\n    from astropy.io import fits\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from astropy import units as u\n    from astropy import constants as const\n    from specutils import Spectrum1D\n    from astropy.visualization import quantity_support\n    from specutils.fitting import fit_generic_continuum\n    from specutils.spectra import SpectralRegion \n    from specutils.analysis import correlation\n    from astropy.nddata import StdDevUncertainty\n\n    quantity_support() \n    fluxunit = u.erg / (u.cm ** 2 * u.second *u.AA)\n    uncertainty = StdDevUncertainty(0.01*np.ones(np.size(wave))*fluxunit)\n    wave_units=wave*u.AA\n    flux_units=flux*fluxunit\n    spec1d = Spectrum1D(spectral_axis=wave_units, flux=flux_units, uncertainty=uncertainty,\n        velocity_convention='optical',     rest_value=rest_value)\n    return spec1d\n\ndef get_vhelio(wave,skycoords,obs_time):\n    from astropy.time import Time\n    from astropy.coordinates import SkyCoord, EarthLocation\n    erau = EarthLocation.from_geodetic(lat=29.188183*u.deg, lon=-81.048313*u.deg, height=38*u.m)\n    heliocorr = sc.radial_velocity_correction('heliocentric', obstime=Time(obs_time), location=erau)  \n    to_helio=heliocorr.to(u.km/u.s)\n    wave_vhelio = (to_helio/const.c)*wave + wave\n    return wave_vhelio\n\ndef get_vel_diff(spec1,spec2):\n    import numpy as np\n    from astropy.io import fits\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from astropy import units as u\n    from astropy import constants as const\n    from specutils import Spectrum1D\n    from astropy.visualization import quantity_support\n    from specutils.fitting import fit_generic_continuum\n    from specutils.spectra import SpectralRegion \n    from specutils.analysis import correlation\n    from astropy.nddata import StdDevUncertainty\n\n\n    corr, lag = correlation.template_correlate(spec1,spec2)\n    max = np.where(corr == np.max(corr))\n    return lag[max[0]], corr, lag\n\ndef plot_spec_vel(spec1,spec2,label1,label2):\n    fig, ax=plt.subplots()\n    ax.set_xlabel('Velocity [km/s]',fontsize=20)\n    ax.set_ylabel('Flux',fontsize=20)\n\n    ax.set_title(archive_path)\n    ax.tick_params(axis='x', labelsize=18)\n    ax.tick_params(axis='y', labelsize=18)\n    ax.plot(spec1.velocity, spec1.flux,label=label1)\n    ax.plot(spec2.velocity, spec2.flux,label=label2)\n    ax.set_xlim([-5000,5000])\n    ax.legend()\n\ndef plot_corr_lag(corr,lag):\n    fig, ax=plt.subplots()\n    ax.set_xlabel('Velocity [km/s]',fontsize=20)\n    ax.set_ylabel('Correlation',fontsize=20)\n\n    ax.tick_params(axis='x', labelsize=18)\n    ax.tick_params(axis='y', labelsize=18)\n    ax.plot(lag, corr)\n    ax.vlines(0,0,np.max(corr),color='black')\n#    ax.set_xlim([-1000,1000])\n#    ax.legend()\n    \n    \n#archive_path1='./EpsilonAurigae_20240201015728_35.fit'\n#wave1,flux1=get_wave_flux(archive_path1)\n#sc1 = SkyCoord(ra=075.4922265361500*u.deg, dec=43.8233103098100*u.deg,equinox='J2000')\n#wave1_vhelio=get_vhelio(wave1,sc1,'2024-2-1')\n#spec1d_1=get_spec1d(wave1_vhelio,flux1)\n\narchive_path1='./Spectrographtraining_34_20240201T001432.fit' #aldebaran RV=54.47\nwave1,flux1=get_wave_flux(archive_path1)\nsc1 = SkyCoord(ra=68.98016279*u.deg, dec=16.50930235*u.deg,equinox='J2000')\nwave1_vhelio=get_vhelio(wave1,sc1,'2024-2-1')\nspec1d_1=get_spec1d(wave1_vhelio,flux1,np.mean(wave1_vhelio)*u.AA)\n\narchive_path2='./HD20902_34_20240201T013423.fit' #HD20902 RV=-2.158\nwave2,flux2=get_wave_flux(archive_path2)\nsc2 = SkyCoord(ra=51.0807087183*u.deg, dec=49.8611792931*u.deg,equinox='J2000')\nwave2_vhelio=get_vhelio(wave2,sc2,'2024-2-1')\nspec1d_2=get_spec1d(wave2_vhelio,flux2,np.mean(wave1_vhelio)*u.AA)\n\nvel,corr,lag=get_vel_diff(spec1d_1,spec1d_2)\nprint(\"Relative velocity shift: \",'{:g}'.format(vel[0]))\n\nplot_spec_vel(spec1d_1,spec1d_2,r'$\\alpha$ Tau','HD 20902')\nplot_corr_lag(corr,lag)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/astropy/units/quantity.py:666: RuntimeWarning: invalid value encountered in divide\n  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"},"1":{"name":"stdout","text":"Relative velocity shift:  57.6154 km / s\n"},"2":{"data":{"image/png":"5b4d97d72fc1cceecc54d1a0522995115eb09474","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":458,"width":743},"needs_background":"light"}},"3":{"data":{"image/png":"23543f7df05227287c1e37ea75eb924c5663f354","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":442,"width":760},"needs_background":"light"}}},"pos":8,"start":1707399414233,"state":"done","type":"cell"}
{"end":1707399416434,"exec_count":7,"id":"39f8b8","input":"list_path='./HD20902_alftau.list'\nlist = pd.read_csv(list_path, delimiter = \"\\s+\", header=None)\nlist.columns=['HD20902','alftau']\n\nvel_save=[]\ncount=0\nfor i in range(0,len(list.alftau)):\n    if ((i != 0) and (i != 1) and (i != 2) and (i != 9) and (i !=11) and (i != 12) and (i != 13) and (i !=14) and (i !=15) and (i !=16)):\n        archive_path1=list.iloc[i,1]\n        wave1,flux1=get_wave_flux(archive_path1)\n        sc1 = SkyCoord(ra=68.98016279*u.deg, dec=16.50930235*u.deg,equinox='J2000')\n        wave1_vhelio=get_vhelio(wave1,sc1,'2024-2-1')\n        spec1d_1=get_spec1d(wave1_vhelio,flux1,np.mean(wave1_vhelio)*u.AA)\n\n        archive_path2=list.iloc[i,0]\n        wave2,flux2=get_wave_flux(archive_path2)\n        sc2 = SkyCoord(ra=51.0807087183*u.deg, dec=49.8611792931*u.deg,equinox='J2000')\n        wave2_vhelio=get_vhelio(wave2,sc2,'2024-2-1')\n        spec1d_2=get_spec1d(wave2_vhelio,flux2,np.mean(wave1_vhelio)*u.AA)\n        vel,corr,lag=get_vel_diff(spec1d_1,spec1d_2)\n        vel_save.append(vel)\n        count=count+1\nprint(\"Average of \",count,\" orders:\")\nprint(\"Mean velocity difference:\",'{:g}'.format(np.mean(vel_save)*u.km/u.s))\nprint(\"Error in the mean:\",'{:g}'.format((np.std(vel_save)/np.sqrt(count))*u.km/u.s))\nprint(\"Expected veloicty difference:\",'{:g}'.format((54.47-(-2.158))*u.km/u.s))\n","kernel":"python3","no_halt":true,"output":{"0":{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/astropy/units/quantity.py:666: RuntimeWarning: invalid value encountered in divide\n  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"},"1":{"name":"stdout","text":"Average of  9  orders:\nMean velocity difference: 56.7259 km / s\nError in the mean: 1.25457 km / s\nExpected veloicty difference: 56.628 km / s\n"}},"pos":10,"start":1707399415039,"state":"done","type":"cell"}
{"id":"8941b7","input":"","pos":11,"type":"cell"}
{"id":0,"time":1707354068179,"type":"user"}
{"last_load":1707344414361,"type":"file"}